// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iuSa1MtYgfxVkY23CKsNe
// Component: iMMltyy1WGYu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: yqtmlg7NYqV/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import { CmsRowField } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: w6HdOz-Pcn/codeComponent
import { Video } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: RhitNJW5Zu-/codeComponent
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent

import { useScreenVariants as useScreenVariants_22Zb8UtchRz3S } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 22ZB8UtchRz3s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_frontend.module.css"; // plasmic-import: 7iuSa1MtYgfxVkY23CKsNe/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: iMMltyy1WGYu/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: HE_27bqwn7H/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Y45Cq3CN4lF/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  foreground2?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  cmsDataLoader?: p.Flex<typeof CmsQueryRepeater>;
  columns?: p.Flex<"div">;
  htmlVideo?: p.Flex<typeof Video>;
};

export interface DefaultHomepageProps {}

export const defaultHomepage__Args: Partial<PlasmicHomepage__ArgsType> = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_22Zb8UtchRz3S()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__tc8Rx
                )}
                component={Link}
                href={"#" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___2PyEw)}
                  displayHeight={"40px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={{
                    src: "/plasmic/frontend/images/logosvg.svg",
                    fullWidth: 300,
                    fullHeight: 55,
                    aspectRatio: 5.431818
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nErrY)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            }
            itemsGap={8 as const}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___6OpTw
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Home"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___76Bzc
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___4Kbw0
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__otIfB)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/menu.svg" as const}
              />
            }
            responsiveBreakpoint={768 as const}
          />

          <div className={classNames(projectcss.all, sty.freeBox___5Qyk9)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nHnUj)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jv5A0
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Designs that "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecoration: "underline" }}
                    >
                      {"scale"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vOfrs
                  )}
                >
                  {
                    "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__idpTk)}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__qpvGv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cMr
                    )}
                  >
                    {"Start now ->"}
                  </div>
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button___0AtSm)}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uesrO
                    )}
                  >
                    {"Learn more…"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__xrEcu)}>
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"What We Do"}
            </h2>

            <h4
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.h4__c8Zbu
              )}
            >
              {
                "We rapidly transform today’s mid-market and emerging companies into future-proof businesses of tomorrow. By connecting unseen dots and unlocking hidden value, our trusted, proven Strategic Advisors will help radically grow your business."
              }
            </h4>
          </div>

          <h4
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4__zgE96
            )}
          >
            {
              "We focus on five key specialties to get your organization on track to future-proof success"
            }
          </h4>

          <div className={classNames(projectcss.all, sty.freeBox__x1V2)}>
            <CmsQueryRepeater
              data-plasmic-name={"cmsDataLoader"}
              data-plasmic-override={overrides.cmsDataLoader}
              className={classNames("__wab_instance", sty.cmsDataLoader)}
              desc={false}
              emptyMessage={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ufr8M
                  )}
                >
                  {"No matching published entries found."}
                </div>
              }
              forceEmptyState={false}
              forceLoadingState={false}
              limit={0 as const}
              loadingMessage={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___3P8S
                  )}
                >
                  {"Loading..."}
                </div>
              }
              noLayout={false}
              useDraft={false}
            >
              <div className={classNames(projectcss.all, sty.freeBox__pgOdk)}>
                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__rp47A
                  )}
                  field={"title" as const}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField___1Ka4
                  )}
                  field={"content" as const}
                />

                <CmsRowField
                  className={classNames(
                    "__wab_instance",
                    sty.cmsEntryField__eurH
                  )}
                  field={"image" as const}
                />
              </div>
            </CmsQueryRepeater>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__slZuW)}>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__fmNfd)} />

              <div className={classNames(projectcss.all, sty.column__bcGkg)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vlMa0
                  )}
                >
                  {"Enter some text"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xmYsp
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
                  }
                </div>
              </div>
            </div>

            <Video
              data-plasmic-name={"htmlVideo"}
              data-plasmic-override={overrides.htmlVideo}
              autoPlay={true}
              className={classNames("__wab_instance", sty.htmlVideo)}
              controls={false}
              loop={true}
              playsInline={false}
              src={
                "https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm" as const
              }
            />
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__tWpA2)}>
            <Slider
              adaptiveHeight={false}
              autoplay={false}
              className={classNames("__wab_instance", sty.slider__n9RN9)}
              dots={true}
              slidesToShow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (3 as const)
              }
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__sB9B)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__d5UD)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={
                      "https://via.placeholder.com/150x90/00FF00/FFFFFF/?text=Slide_2" as const
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ulhJj
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__mEhY3)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__q3E02)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={
                      "https://via.placeholder.com/150x90/0000FF/FFFFFF/?text=Slide_3" as const
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___91ObI
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___5CRts)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__r1WlH)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={
                      "https://via.placeholder.com/150x90/0000FF/FFFFFF/?text=Slide_3" as const
                    }
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ny9Eq
                    )}
                  >
                    {"Enter some text"}
                  </div>
                </div>
              ) : null}
            </Slider>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__rtIpU)}>
            <Slider
              adaptiveHeight={false}
              autoplay={false}
              className={classNames("__wab_instance", sty.slider__gf4Px)}
              dots={true}
              slidesToShow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (1 as const)
              }
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__ek7HR)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y8VkY
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "
                    }
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kcYSs)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zq0Fv
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "
                    }
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__mEhY3)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___91ObI
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "
                    }
                  </div>
                </div>
              ) : null}
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___5CRts)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ny9Eq
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. "
                    }
                  </div>
                </div>
              ) : null}
            </Slider>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jxuot)}>
            <Slider
              adaptiveHeight={false}
              autoplay={false}
              className={classNames("__wab_instance", sty.slider___6MT6O)}
              dots={true}
              slidesToShow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (1 as const)
              }
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__miUXq)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__ejQkG
                    )}
                  >
                    {"Heading"}
                  </h1>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kcYSs)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__yfyno
                    )}
                  >
                    {"Heading"}
                  </h1>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__psnw3)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__otTjk
                    )}
                  >
                    {"Heading"}
                  </h1>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__lbcsg)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__qFpaG
                    )}
                  >
                    {"Heading"}
                  </h1>
                </div>
              ) : null}
            </Slider>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "foreground2",
    "h2",
    "cmsDataLoader",
    "columns",
    "htmlVideo"
  ],
  navigationBar: ["navigationBar"],
  foreground2: ["foreground2"],
  h2: ["h2"],
  cmsDataLoader: ["cmsDataLoader"],
  columns: ["columns"],
  htmlVideo: ["htmlVideo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  foreground2: "div";
  h2: "h2";
  cmsDataLoader: typeof CmsQueryRepeater;
  columns: "div";
  htmlVideo: typeof Video;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    foreground2: makeNodeComponent("foreground2"),
    h2: makeNodeComponent("h2"),
    cmsDataLoader: makeNodeComponent("cmsDataLoader"),
    columns: makeNodeComponent("columns"),
    htmlVideo: makeNodeComponent("htmlVideo"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
